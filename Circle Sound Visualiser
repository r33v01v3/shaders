//r33v01v3 2021
//Based on https://steamcommunity.com/sharedfiles/filedetails/?id=2546268111

#include "common_blending.h"

// [COMBO] {"material":"ui_editor_properties_blend_mode","combo":"BLENDMODE","type":"imageblending","default":0}
uniform sampler2D g_Texture0; // {"material":"framebuffer","label":"ui_editor_properties_framebuffer","hidden":true}
uniform vec4 g_Texture0Resolution;
uniform float g_Time;
uniform float u_my_x; // {"material":"X Position","default":0,"range":[-2,2]}
uniform float u_my_y; // {"material":"Y Position","default":0,"range":[-2,2]}
uniform float u_opacity; // {"material":"Effect Opacity","default":1,"range":[0,1]}
uniform float u_Amplitude; // {"material":"Amplitude","int":false,"default":0.10,"range":[0,1]}
uniform float u_Speed; // {"material":"Rotation Speed","default":0.5,"range":[-2,2]}
uniform float u_waves; // {"material":"Waves","int":true,"default":5,"range":[1,15]}
uniform float u_Scale; // {"material":"Scale","default":0.3,"range":[0,1]}
uniform float u_Thickness; // {"material":"Thickness","int":false,"default":1.0,"range":[0.1,5]}
uniform float u_af; // {"material":"Audio Frequency","int":true,"default":5,"range":[0,15]}
uniform float u_al; // {"material":"Audio Level","default":0.5,"range":[0,1]}
uniform vec3 u_col; // {"material":"Colour","type":"color","default":"1 1 1"}
uniform sampler2D g_Texture1; // {"combo":"MASK","default":"util/white","label":"ui_editor_properties_opacity_mask","material":"mask","mode":"opacitymask","paintdefaultcolor":"0 0 0 1"}
uniform float g_AudioSpectrum16Left[16];

varying vec4 v_TexCoord;

void main() {
	vec4 albedo = texSample2D(g_Texture0, v_TexCoord.xy);
	vec4 mask = texSample2D(g_Texture1, v_TexCoord.xy);
	vec2 uv = ((v_TexCoord.xy-0.5)*g_Texture0Resolution.xy)/g_Texture0Resolution.y;
	uv.x += u_my_x;
	uv.y += u_my_y;
	vec3 col = CAST3(0.0);
	float my_audio = g_AudioSpectrum16Left[int(u_af)]*(u_al*0.2);
	float circ;
	circ = 0.01 / abs(u_Scale + (sin((atan2(uv.y, uv.x) + g_Time * u_Speed) * u_waves) * ((u_Amplitude*0.1)+my_audio) ) - length(uv)) * u_Thickness;
	col+= circ*u_col;
	float circ_a = circ*u_opacity;
	vec3 col_out = ApplyBlending(BLENDMODE, albedo.rgb, col.rgb, circ_a * mask.r);
	
	gl_FragColor = vec4(col_out,albedo.a);
}
